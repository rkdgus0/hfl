# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fl_pb2 as fl__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ConfigServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendConfig = channel.unary_unary(
                '/fl.ConfigService/SendConfig',
                request_serializer=fl__pb2.Config.SerializeToString,
                response_deserializer=fl__pb2.ReturnConfigMsg.FromString,
                )


class ConfigServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SendConfig,
                    request_deserializer=fl__pb2.Config.FromString,
                    response_serializer=fl__pb2.ReturnConfigMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fl.ConfigService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConfigService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.ConfigService/SendConfig',
            fl__pb2.Config.SerializeToString,
            fl__pb2.ReturnConfigMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterLeader = channel.unary_unary(
                '/fl.Manager/RegisterLeader',
                request_serializer=fl__pb2.AddressMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.RegisterAggregator = channel.unary_unary(
                '/fl.Manager/RegisterAggregator',
                request_serializer=fl__pb2.AddressMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.RegisterUserSet = channel.unary_unary(
                '/fl.Manager/RegisterUserSet',
                request_serializer=fl__pb2.AddressMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.ReportFinalResults = channel.unary_unary(
                '/fl.Manager/ReportFinalResults',
                request_serializer=fl__pb2.FinalResultsMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.ReturnCondition = channel.unary_unary(
                '/fl.Manager/ReturnCondition',
                request_serializer=fl__pb2.ConditionMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )


class ManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterLeader(self, request, context):
        """For Register
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAggregator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUserSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportFinalResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnCondition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterLeader,
                    request_deserializer=fl__pb2.AddressMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'RegisterAggregator': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAggregator,
                    request_deserializer=fl__pb2.AddressMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'RegisterUserSet': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUserSet,
                    request_deserializer=fl__pb2.AddressMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'ReportFinalResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportFinalResults,
                    request_deserializer=fl__pb2.FinalResultsMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'ReturnCondition': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnCondition,
                    request_deserializer=fl__pb2.ConditionMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fl.Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Manager/RegisterLeader',
            fl__pb2.AddressMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterAggregator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Manager/RegisterAggregator',
            fl__pb2.AddressMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUserSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Manager/RegisterUserSet',
            fl__pb2.AddressMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportFinalResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Manager/ReportFinalResults',
            fl__pb2.FinalResultsMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Manager/ReturnCondition',
            fl__pb2.ConditionMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LeaderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAggregator = channel.unary_unary(
                '/fl.Leader/RegisterAggregator',
                request_serializer=fl__pb2.AddressMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.ReturnMecModel = channel.unary_unary(
                '/fl.Leader/ReturnMecModel',
                request_serializer=fl__pb2.ModelMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.ConfigSending = channel.unary_unary(
                '/fl.Leader/ConfigSending',
                request_serializer=fl__pb2.Config.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LeaderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterAggregator(self, request, context):
        """For Aggregator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnMecModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigSending(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAggregator': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAggregator,
                    request_deserializer=fl__pb2.AddressMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'ReturnMecModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnMecModel,
                    request_deserializer=fl__pb2.ModelMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'ConfigSending': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigSending,
                    request_deserializer=fl__pb2.Config.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fl.Leader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Leader(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterAggregator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Leader/RegisterAggregator',
            fl__pb2.AddressMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnMecModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Leader/ReturnMecModel',
            fl__pb2.ModelMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigSending(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Leader/ConfigSending',
            fl__pb2.Config.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AggregatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestMecModel = channel.unary_unary(
                '/fl.Aggregator/RequestMecModel',
                request_serializer=fl__pb2.ModelMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.RegisterUserSet = channel.unary_unary(
                '/fl.Aggregator/RegisterUserSet',
                request_serializer=fl__pb2.AddressSetMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.ReturnUserModelSet = channel.unary_unary(
                '/fl.Aggregator/ReturnUserModelSet',
                request_serializer=fl__pb2.ModelSetMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnMsg.FromString,
                )
        self.ConfigSending = channel.unary_unary(
                '/fl.Aggregator/ConfigSending',
                request_serializer=fl__pb2.Config.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class AggregatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestMecModel(self, request, context):
        """For Leader
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUserSet(self, request, context):
        """For Userset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnUserModelSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigSending(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestMecModel': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestMecModel,
                    request_deserializer=fl__pb2.ModelMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'RegisterUserSet': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUserSet,
                    request_deserializer=fl__pb2.AddressSetMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'ReturnUserModelSet': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnUserModelSet,
                    request_deserializer=fl__pb2.ModelSetMsg.FromString,
                    response_serializer=fl__pb2.ReturnMsg.SerializeToString,
            ),
            'ConfigSending': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigSending,
                    request_deserializer=fl__pb2.Config.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fl.Aggregator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Aggregator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestMecModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Aggregator/RequestMecModel',
            fl__pb2.ModelMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUserSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Aggregator/RegisterUserSet',
            fl__pb2.AddressSetMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnUserModelSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Aggregator/ReturnUserModelSet',
            fl__pb2.ModelSetMsg.SerializeToString,
            fl__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigSending(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.Aggregator/ConfigSending',
            fl__pb2.Config.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UserSetStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestUserModelSet = channel.unary_unary(
                '/fl.UserSet/RequestUserModelSet',
                request_serializer=fl__pb2.ReqUserModelSetMsg.SerializeToString,
                response_deserializer=fl__pb2.ReturnSetMsg.FromString,
                )
        self.ConfigSending = channel.unary_unary(
                '/fl.UserSet/ConfigSending',
                request_serializer=fl__pb2.Config.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class UserSetServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestUserModelSet(self, request, context):
        """For Aggregator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigSending(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserSetServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestUserModelSet': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestUserModelSet,
                    request_deserializer=fl__pb2.ReqUserModelSetMsg.FromString,
                    response_serializer=fl__pb2.ReturnSetMsg.SerializeToString,
            ),
            'ConfigSending': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigSending,
                    request_deserializer=fl__pb2.Config.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fl.UserSet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserSet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestUserModelSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.UserSet/RequestUserModelSet',
            fl__pb2.ReqUserModelSetMsg.SerializeToString,
            fl__pb2.ReturnSetMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigSending(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fl.UserSet/ConfigSending',
            fl__pb2.Config.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
